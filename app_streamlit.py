# ============================================================
# üí∞ SmartLog Blockchain ‚Äî Simulador de Consenso (Streamlit)
# ============================================================
# Interface visual que usa o m√≥dulo smartlog_blockchain.py
# para demonstrar consenso Proof-of-Authority na pr√°tica.
# ============================================================

import streamlit as st
import pandas as pd
from datetime import datetime
from smartlog_blockchain import (
    criar_blockchain_inicial, criar_nos, validar_consenso,
    simular_chaves_privadas, propor_bloco, votar_proposta,
    aplicar_consenso
)

# ============================================================
# üé® CONFIGURA√á√ïES INICIAIS
# ============================================================
st.set_page_config(page_title="SmartLog Blockchain Consensus", page_icon="‚õìÔ∏è", layout="wide")

st.title("‚õìÔ∏è SmartLog Blockchain ‚Äî Simulador de Consenso (PoA)")
st.markdown("""
Este simulador demonstra o funcionamento de um **consenso Proof-of-Authority** em uma rede blockchain log√≠stica.
Cada n√≥ assina digitalmente um novo bloco proposto ‚Äî e, se atingir o *quorum* (2 de 3), o bloco √© aceito por todos.  
---
""")

# ============================================================
# üß± CRIAR BLOCKCHAIN BASE E N√ìS
# ============================================================
if "nos" not in st.session_state:
    # Criar dataframe de eventos simulados
    dados = {
        "id_entrega": [1, 2, 3],
        "source_center": ["Dep√≥sito_SP", "Dep√≥sito_SP", "Dep√≥sito_RJ"],
        "destination_name": ["Centro_MG", "Centro_PR", "Centro_BA"],
        "etapa": ["Saiu do dep√≥sito", "Em rota", "Chegou ao destino"],
        "timestamp": [datetime.now()] * 3,
        "risco": ["Baixo", "M√©dio", "Baixo"]
    }
    eventos_df = pd.DataFrame(dados)

    # Criar blockchain inicial e n√≥s
    blockchain_df = criar_blockchain_inicial(eventos_df)
    nos = criar_nos(blockchain_df)
    chaves = simular_chaves_privadas(nos)

    # Guardar em sess√£o
    st.session_state.blockchain_df = blockchain_df
    st.session_state.nos = nos
    st.session_state.chaves = chaves
    st.session_state.historico = []

nos = st.session_state.nos
chaves = st.session_state.chaves

# ============================================================
# üì¶ VISUALIZA√á√ÉO DOS N√ìS
# ============================================================
st.subheader("üì¶ Estado Atual dos N√≥s")

col1, col2, col3 = st.columns(3)
for i, (nome, df) in enumerate(nos.items()):
    with [col1, col2, col3][i]:
        ultimo_hash = df.iloc[-1]["hash_atual"][:12]
        st.metric(label=f"{nome}", value=f"Hash final: {ultimo_hash}")

# ============================================================
# üß† PROPOR NOVO BLOCO
# ============================================================
st.markdown("---")
st.subheader("üß† Propor Novo Bloco")

evento_texto = st.text_input("Descri√ß√£o do novo evento:", "Entrega #104 ‚Äî Saiu do dep√≥sito ‚Äî SP ‚Üí MG")
propositor = st.selectbox("Selecione o n√≥ propositor:", list(nos.keys()))
quorum = st.slider("Defina o quorum m√≠nimo:", 1, len(nos), 2)

if st.button("üöÄ Propor e Validar"):
    hash_anterior = list(nos.values())[0].iloc[-1]["hash_atual"]
    proposta = propor_bloco(propositor, evento_texto, hash_anterior)
    proposta = votar_proposta(proposta, nos, chaves)

    sucesso = aplicar_consenso(proposta, nos, quorum=quorum)

    if sucesso:
        st.success("‚úÖ Consenso alcan√ßado! O bloco foi adicionado em todos os n√≥s.")
        st.session_state.historico.append({
            "evento": evento_texto,
            "propositor": propositor,
            "assinaturas": len(proposta["assinaturas"]),
            "status": "Aceito"
        })
    else:
        st.error("‚ùå Quorum insuficiente. O bloco foi rejeitado.")
        st.session_state.historico.append({
            "evento": evento_texto,
            "propositor": propositor,
            "assinaturas": len(proposta["assinaturas"]),
            "status": "Rejeitado"
        })

# ============================================================
# üìú HIST√ìRICO DE CONSENSOS
# ============================================================
if st.session_state.historico:
    st.markdown("---")
    st.subheader("üìú Hist√≥rico de Propostas")
    historico_df = pd.DataFrame(st.session_state.historico)
    st.dataframe(historico_df, use_container_width=True)

# ============================================================
# üîç STATUS DE CONSENSO
# ============================================================
st.markdown("---")
st.subheader("üîç Status de Consenso da Rede")

if validar_consenso(nos):
    st.success("üü¢ Todos os n√≥s est√£o sincronizados.")
else:
    st.warning("üü† Diverg√™ncia detectada entre os n√≥s!")
